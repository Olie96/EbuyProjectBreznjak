

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "EbuyProject\Web.config"
//     Connection String Name: "EbuyDatabaseTestModels"
//     Connection String:      "Data Source=DESKTOP-RTQVUMU\SQLEXPRESS;Initial Catalog=EbuyTestDatabase;Integrated Security=True"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace Ebuy.DAL
{
    using System.Linq;

    #region Unit of work

    public interface IMyDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<Book> Books { get; set; } // Book
        System.Data.Entity.DbSet<Car> Cars { get; set; } // Car
        System.Data.Entity.DbSet<Cart> Carts { get; set; } // Cart
        System.Data.Entity.DbSet<Electronic> Electronics { get; set; } // Electronic
        System.Data.Entity.DbSet<Music> Musics { get; set; } // Music
        System.Data.Entity.DbSet<Sport> Sports { get; set; } // Sport
        System.Data.Entity.DbSet<User> Users { get; set; } // User

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class MyDbContext : System.Data.Entity.DbContext, IMyDbContext
    {
        public System.Data.Entity.DbSet<Book> Books { get; set; } // Book
        public System.Data.Entity.DbSet<Car> Cars { get; set; } // Car
        public System.Data.Entity.DbSet<Cart> Carts { get; set; } // Cart
        public System.Data.Entity.DbSet<Electronic> Electronics { get; set; } // Electronic
        public System.Data.Entity.DbSet<Music> Musics { get; set; } // Music
        public System.Data.Entity.DbSet<Sport> Sports { get; set; } // Sport
        public System.Data.Entity.DbSet<User> Users { get; set; } // User

        static MyDbContext()
        {
            System.Data.Entity.Database.SetInitializer<MyDbContext>(null);
        }

        public MyDbContext()
            : base("Name=EbuyDatabaseTestModels")
        {
        }

        public MyDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public MyDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new BookConfiguration());
            modelBuilder.Configurations.Add(new CarConfiguration());
            modelBuilder.Configurations.Add(new CartConfiguration());
            modelBuilder.Configurations.Add(new ElectronicConfiguration());
            modelBuilder.Configurations.Add(new MusicConfiguration());
            modelBuilder.Configurations.Add(new SportConfiguration());
            modelBuilder.Configurations.Add(new UserConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new BookConfiguration(schema));
            modelBuilder.Configurations.Add(new CarConfiguration(schema));
            modelBuilder.Configurations.Add(new CartConfiguration(schema));
            modelBuilder.Configurations.Add(new ElectronicConfiguration(schema));
            modelBuilder.Configurations.Add(new MusicConfiguration(schema));
            modelBuilder.Configurations.Add(new SportConfiguration(schema));
            modelBuilder.Configurations.Add(new UserConfiguration(schema));
            return modelBuilder;
        }
    }
    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class FakeMyDbContext : IMyDbContext
    {
        public System.Data.Entity.DbSet<Book> Books { get; set; }
        public System.Data.Entity.DbSet<Car> Cars { get; set; }
        public System.Data.Entity.DbSet<Cart> Carts { get; set; }
        public System.Data.Entity.DbSet<Electronic> Electronics { get; set; }
        public System.Data.Entity.DbSet<Music> Musics { get; set; }
        public System.Data.Entity.DbSet<Sport> Sports { get; set; }
        public System.Data.Entity.DbSet<User> Users { get; set; }

        public FakeMyDbContext()
        {
            Books = new FakeDbSet<Book>("BookId");
            Cars = new FakeDbSet<Car>("CarId");
            Carts = new FakeDbSet<Cart>("CartId");
            Electronics = new FakeDbSet<Electronic>("ElectronicPartId");
            Musics = new FakeDbSet<Music>("MusicPartId");
            Sports = new FakeDbSet<Sport>("SportItemId");
            Users = new FakeDbSet<User>("UserId");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        public System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        public System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        public System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // Book
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class Book
    {
        public int BookId { get; set; } // BookId (Primary key)
        public string BookName { get; set; } // BookName (length: 50)
        public string BookAuthorName { get; set; } // BookAuthorName (length: 50)
        public string BookAuthorSurname { get; set; } // BookAuthorSurname (length: 50)
        public string BookIsbn { get; set; } // BookISBN (length: 50)
        public string BookGenre { get; set; } // BookGenre (length: 50)
        public string BookDescription { get; set; } // BookDescription
        public int? BookPrice { get; set; } // BookPrice
        public int? CartId { get; set; } // CartId

        // Foreign keys
        public virtual Cart Cart { get; set; } // FK_Book_Cart
    }

    // Car
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class Car
    {
        public int CarId { get; set; } // CarId (Primary key)
        public string CarMaker { get; set; } // CarMaker (length: 50)
        public string CarModel { get; set; } // CarModel (length: 50)
        public int? CarYearOfProduction { get; set; } // CarYearOfProduction
        public int? CarKilometers { get; set; } // CarKilometers
        public int? CarPrice { get; set; } // CarPrice
        public string CarDescription { get; set; } // CarDescription
        public int? CartId { get; set; } // CartId

        // Foreign keys
        public virtual Cart Cart { get; set; } // FK_Car_Cart
    }

    // Cart
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class Cart
    {
        public int CartId { get; set; } // CartId (Primary key)
        public int? UserId { get; set; } // UserId

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Book> Books { get; set; } // Book.FK_Book_Cart
        public virtual System.Collections.Generic.ICollection<Car> Cars { get; set; } // Car.FK_Car_Cart
        public virtual System.Collections.Generic.ICollection<Electronic> Electronics { get; set; } // Electronic.FK_Electronic_Cart
        public virtual System.Collections.Generic.ICollection<Music> Musics { get; set; } // Music.FK_Music_Cart
        public virtual System.Collections.Generic.ICollection<Sport> Sports { get; set; } // Sport.FK_Sport_Cart

        public Cart()
        {
            Books = new System.Collections.Generic.List<Book>();
            Cars = new System.Collections.Generic.List<Car>();
            Electronics = new System.Collections.Generic.List<Electronic>();
            Musics = new System.Collections.Generic.List<Music>();
            Sports = new System.Collections.Generic.List<Sport>();
        }
    }

    // Electronic
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class Electronic
    {
        public int ElectronicPartId { get; set; } // ElectronicPartId (Primary key)
        public string ElectronicPartName { get; set; } // ElectronicPartName (length: 50)
        public string ElectronicPartDescription { get; set; } // ElectronicPartDescription
        public int? ElectronicPartPrice { get; set; } // ElectronicPartPrice
        public int? CartId { get; set; } // CartId

        // Foreign keys
        public virtual Cart Cart { get; set; } // FK_Electronic_Cart
    }

    // Music
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class Music
    {
        public int MusicPartId { get; set; } // MusicPartId (Primary key)
        public string MusicPartName { get; set; } // MusicPartName (length: 50)
        public string MusicPartDescription { get; set; } // MusicPartDescription
        public int? MusicPartPrice { get; set; } // MusicPartPrice
        public int? CartId { get; set; } // CartId

        // Foreign keys
        public virtual Cart Cart { get; set; } // FK_Music_Cart
    }

    // Sport
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class Sport
    {
        public int SportItemId { get; set; } // SportItemId (Primary key)
        public string SportItemName { get; set; } // SportItemName (length: 50)
        public string SportItemDescription { get; set; } // SportItemDescription (length: 50)
        public int? SportItemPrice { get; set; } // SportItemPrice
        public int? CartId { get; set; } // CartId

        // Foreign keys
        public virtual Cart Cart { get; set; } // FK_Sport_Cart
    }

    // User
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class User
    {
        public int UserId { get; set; } // UserId (Primary key)
        public string FirstName { get; set; } // FirstName (length: 50)
        public string LastName { get; set; } // LastName (length: 50)
        public string Adress { get; set; } // Adress (length: 50)
        public string Email { get; set; } // Email (length: 50)
        public string Password { get; set; } // Password (length: 50)
    }

    #endregion

    #region POCO Configuration

    // Book
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class BookConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Book>
    {
        public BookConfiguration()
            : this("dbo")
        {
        }

        public BookConfiguration(string schema)
        {
            ToTable("Book", schema);
            HasKey(x => x.BookId);

            Property(x => x.BookId).HasColumnName(@"BookId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.BookName).HasColumnName(@"BookName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.BookAuthorName).HasColumnName(@"BookAuthorName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.BookAuthorSurname).HasColumnName(@"BookAuthorSurname").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.BookIsbn).HasColumnName(@"BookISBN").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.BookGenre).HasColumnName(@"BookGenre").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.BookDescription).HasColumnName(@"BookDescription").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.BookPrice).HasColumnName(@"BookPrice").HasColumnType("int").IsOptional();
            Property(x => x.CartId).HasColumnName(@"CartId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.Cart).WithMany(b => b.Books).HasForeignKey(c => c.CartId).WillCascadeOnDelete(false); // FK_Book_Cart
        }
    }

    // Car
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class CarConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Car>
    {
        public CarConfiguration()
            : this("dbo")
        {
        }

        public CarConfiguration(string schema)
        {
            ToTable("Car", schema);
            HasKey(x => x.CarId);

            Property(x => x.CarId).HasColumnName(@"CarId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CarMaker).HasColumnName(@"CarMaker").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.CarModel).HasColumnName(@"CarModel").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.CarYearOfProduction).HasColumnName(@"CarYearOfProduction").HasColumnType("int").IsOptional();
            Property(x => x.CarKilometers).HasColumnName(@"CarKilometers").HasColumnType("int").IsOptional();
            Property(x => x.CarPrice).HasColumnName(@"CarPrice").HasColumnType("int").IsOptional();
            Property(x => x.CarDescription).HasColumnName(@"CarDescription").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.CartId).HasColumnName(@"CartId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.Cart).WithMany(b => b.Cars).HasForeignKey(c => c.CartId).WillCascadeOnDelete(false); // FK_Car_Cart
        }
    }

    // Cart
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class CartConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Cart>
    {
        public CartConfiguration()
            : this("dbo")
        {
        }

        public CartConfiguration(string schema)
        {
            ToTable("Cart", schema);
            HasKey(x => x.CartId);

            Property(x => x.CartId).HasColumnName(@"CartId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsOptional();
        }
    }

    // Electronic
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class ElectronicConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Electronic>
    {
        public ElectronicConfiguration()
            : this("dbo")
        {
        }

        public ElectronicConfiguration(string schema)
        {
            ToTable("Electronic", schema);
            HasKey(x => x.ElectronicPartId);

            Property(x => x.ElectronicPartId).HasColumnName(@"ElectronicPartId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ElectronicPartName).HasColumnName(@"ElectronicPartName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.ElectronicPartDescription).HasColumnName(@"ElectronicPartDescription").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.ElectronicPartPrice).HasColumnName(@"ElectronicPartPrice").HasColumnType("int").IsOptional();
            Property(x => x.CartId).HasColumnName(@"CartId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.Cart).WithMany(b => b.Electronics).HasForeignKey(c => c.CartId).WillCascadeOnDelete(false); // FK_Electronic_Cart
        }
    }

    // Music
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class MusicConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Music>
    {
        public MusicConfiguration()
            : this("dbo")
        {
        }

        public MusicConfiguration(string schema)
        {
            ToTable("Music", schema);
            HasKey(x => x.MusicPartId);

            Property(x => x.MusicPartId).HasColumnName(@"MusicPartId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.MusicPartName).HasColumnName(@"MusicPartName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.MusicPartDescription).HasColumnName(@"MusicPartDescription").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.MusicPartPrice).HasColumnName(@"MusicPartPrice").HasColumnType("int").IsOptional();
            Property(x => x.CartId).HasColumnName(@"CartId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.Cart).WithMany(b => b.Musics).HasForeignKey(c => c.CartId).WillCascadeOnDelete(false); // FK_Music_Cart
        }
    }

    // Sport
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class SportConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sport>
    {
        public SportConfiguration()
            : this("dbo")
        {
        }

        public SportConfiguration(string schema)
        {
            ToTable("Sport", schema);
            HasKey(x => x.SportItemId);

            Property(x => x.SportItemId).HasColumnName(@"SportItemId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.SportItemName).HasColumnName(@"SportItemName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.SportItemDescription).HasColumnName(@"SportItemDescription").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.SportItemPrice).HasColumnName(@"SportItemPrice").HasColumnType("int").IsOptional();
            Property(x => x.CartId).HasColumnName(@"CartId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.Cart).WithMany(b => b.Sports).HasForeignKey(c => c.CartId).WillCascadeOnDelete(false); // FK_Sport_Cart
        }
    }

    // User
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class UserConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<User>
    {
        public UserConfiguration()
            : this("dbo")
        {
        }

        public UserConfiguration(string schema)
        {
            ToTable("User", schema);
            HasKey(x => x.UserId);

            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Adress).HasColumnName(@"Adress").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Password).HasColumnName(@"Password").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
        }
    }

    #endregion

}
// </auto-generated>

